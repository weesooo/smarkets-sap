{"version":3,"sources":["assets/Header.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","src","alt","App","useState","CryptoData","SetCryptoData","useEffect","Axios","get","then","res","data","catch","error","console","log","map","Card","Image","image","wrapped","ui","Content","name","current_price","toFixed","price_change_percentage_24h","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"wSAiBeA,MAdf,WACE,OACE,yBAAKC,UAAU,UACb,yBAAKA,UAAU,eACb,yBACEA,UAAU,aACVC,IAAI,0EACJC,IAAI,Q,4CC+CCC,MA/Cf,WAAgB,IAAD,EACuBC,mBAAS,IADhC,mBACNC,EADM,KACMC,EADN,KAcb,OARAC,qBAAU,WACRC,IAAMC,IAHN,2HAIGC,MAAK,SAACC,GACLL,EAAcK,EAAIC,SAEnBC,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAIF,QAC/B,IAGD,yBAAKd,UAAU,OACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,SACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,SACZK,EAAWY,KAAI,SAACL,GAAD,OACd,kBAACM,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEnB,UAAU,aACVC,IAAKW,EAAKQ,MACVC,SAAO,EACPC,IAAI,IAEN,kBAACJ,EAAA,EAAKK,QAAN,KACE,kBAACL,EAAA,EAAKnB,OAAN,CAAaC,UAAU,eAAeY,EAAKY,MAC3C,kBAACN,EAAA,EAAKnB,OAAN,CAAaC,UAAU,eAAvB,IACIY,EAAKa,cAAcC,QAAQ,IAE/B,kBAACR,EAAA,EAAKnB,OAAN,CAAaC,UAAU,eACpBY,EAAKe,4BAA4BD,QAAQ,GAD5C,aASZ,kBAAC,EAAD,QCxCcE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEd7B,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM6B,a","file":"static/js/main.f2bd7334.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Header.css\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <div className=\"header\">\r\n      <div className=\"header_icon\">\r\n        <img\r\n          className=\"header_img\"\r\n          src=\"https://cdn-images-1.medium.com/max/980/1*nbi20epTAAcV6Hhc6EVnuw@2x.png\"\r\n          alt=\"\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Header from \"./assets/Header\";\nimport Axios from \"axios\";\nimport \"./assets/Cards.css\";\nimport { Card, Image } from \"semantic-ui-react\";\nimport \"./assets/Cards.css\";\n\n//External Crypto API, Flexbox, Axios, Sementatic UI, Material UI, useState, useEffect\n\nfunction App() {\n  const [CryptoData, SetCryptoData] = useState([]);\n\n  const RequestURL =\n    \"https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=12&page=2&sparkline=false\";\n\n  useEffect(() => {\n    Axios.get(RequestURL)\n      .then((res) => {\n        SetCryptoData(res.data);\n      })\n      .catch((error) => console.log(error)); //Error handling\n  }, []); //Empty array so we can stop the infinite requests to the API and render it only once\n\n  return (\n    <div className=\"app\">\n      <Header />\n      <div className=\"cards\">\n        <div className=\"cards\">\n          <div className=\"cards\">\n            {CryptoData.map((data) => (\n              <Card>\n                <Image\n                  className=\"card_image\"\n                  src={data.image}\n                  wrapped\n                  ui={false}\n                />\n                <Card.Content>\n                  <Card.Header className=\"card_header\">{data.name}</Card.Header>\n                  <Card.Header className=\"card_header\">\n                    ${data.current_price.toFixed(2)}\n                  </Card.Header>\n                  <Card.Header className=\"card_header\">\n                    {data.price_change_percentage_24h.toFixed(2)}%\n                  </Card.Header>\n                </Card.Content>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </div>\n      <Header />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}